# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import CP_Server_pb2 as CP__Server__pb2


class ContentProvider_ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TransmitFile = channel.unary_unary(
                '/ContentProvider_Server/TransmitFile',
                request_serializer=CP__Server__pb2.TransmitFileRequest.SerializeToString,
                response_deserializer=CP__Server__pb2.TransmitFileResponse.FromString,
                )
        self.GetFile = channel.unary_unary(
                '/ContentProvider_Server/GetFile',
                request_serializer=CP__Server__pb2.GetFileRequest.SerializeToString,
                response_deserializer=CP__Server__pb2.GetFileResponse.FromString,
                )
        self.receiveTokenRequest = channel.unary_unary(
                '/ContentProvider_Server/receiveTokenRequest',
                request_serializer=CP__Server__pb2.requestTokenRequest.SerializeToString,
                response_deserializer=CP__Server__pb2.requestTokenResponse.FromString,
                )
        self.receiveToken = channel.unary_unary(
                '/ContentProvider_Server/receiveToken',
                request_serializer=CP__Server__pb2.sendTokenRequest.SerializeToString,
                response_deserializer=CP__Server__pb2.sendTokenResponse.FromString,
                )


class ContentProvider_ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TransmitFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def receiveTokenRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def receiveToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContentProvider_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TransmitFile': grpc.unary_unary_rpc_method_handler(
                    servicer.TransmitFile,
                    request_deserializer=CP__Server__pb2.TransmitFileRequest.FromString,
                    response_serializer=CP__Server__pb2.TransmitFileResponse.SerializeToString,
            ),
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=CP__Server__pb2.GetFileRequest.FromString,
                    response_serializer=CP__Server__pb2.GetFileResponse.SerializeToString,
            ),
            'receiveTokenRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.receiveTokenRequest,
                    request_deserializer=CP__Server__pb2.requestTokenRequest.FromString,
                    response_serializer=CP__Server__pb2.requestTokenResponse.SerializeToString,
            ),
            'receiveToken': grpc.unary_unary_rpc_method_handler(
                    servicer.receiveToken,
                    request_deserializer=CP__Server__pb2.sendTokenRequest.FromString,
                    response_serializer=CP__Server__pb2.sendTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ContentProvider_Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ContentProvider_Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TransmitFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ContentProvider_Server/TransmitFile',
            CP__Server__pb2.TransmitFileRequest.SerializeToString,
            CP__Server__pb2.TransmitFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ContentProvider_Server/GetFile',
            CP__Server__pb2.GetFileRequest.SerializeToString,
            CP__Server__pb2.GetFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def receiveTokenRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ContentProvider_Server/receiveTokenRequest',
            CP__Server__pb2.requestTokenRequest.SerializeToString,
            CP__Server__pb2.requestTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def receiveToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ContentProvider_Server/receiveToken',
            CP__Server__pb2.sendTokenRequest.SerializeToString,
            CP__Server__pb2.sendTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
